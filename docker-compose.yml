version: '3.8'

services:
  db:
    build:
      context: ./backend/db
      dockerfile: Dockerfile
      args:
        DB_USER: restro_usr
        DB_PASSWORD: cs4350
        DB_NAME: restro_sync
        INIT_SCRIPT: init.sql
    image: het2344/comp4350-g07:db
    container_name: restro_sync_db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "restro_usr", "-d", "restro_sync"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 5s

    
  test-db:
    build:
      context: ./backend/db
      dockerfile: Dockerfile
      args:
        DB_USER: restro_usr
        DB_PASSWORD: cs4350
        DB_NAME: restro_test
        INIT_SCRIPT: testDB.sql
    image: het2344/comp4350-g07:test-db
    container_name: restro_sync_test_db
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - test_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "restro_usr", "-d", "restro_test"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: het2344/comp4350-g07:backend
    container_name: node_backend_server
    restart: always
    working_dir: /app
    environment:
      DB_HOST: db
      DB_USER: restro_usr
      DB_PASSWORD: cs4350
      DB_NAME: restro_sync
      DB_PORT: 5432
    ports:
      - "8018:8018" # Change based on your app's port
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: het2344/comp4350-g07:frontend
    container_name: node_frontend_server
    restart: always
    working_dir: /app
    ports:
      - "8017:8017" # Change based on your app's port
    depends_on:
      - backend

  # Jest Testing Service
  test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: het2344/comp4350-g07:test
    container_name: node_test_server
    working_dir: /app
    command: npm test  # Run Jest inside the container
    environment:
      DB_HOST: test-db
      DB_USER: restro_usr
      DB_PASSWORD: cs4350
      DB_NAME: restro_test
      DB_PORT: 5432
      NODE_ENV: test  # Important for testing environment
    depends_on:
      - test-db
  
  loadtest:
    build:
      context: ./loadtest
      dockerfile: Dockerfile
    container_name: loadtest
    working_dir: /app
    # Show JMeter version (same as CMD in Dockerfile).
    # Override the command here if you want to run tests automatically.
    command: >
      sh -c "rm -rf result/* && jmeter -n -t RestroSync-LoadTest.jmx -l result/jtl-report/results.jtl -e -o result/html-report"
    volumes:
      - loadtest_data:/app/result
volumes:
  db_data:
  test_db_data:
  loadtest_data:
