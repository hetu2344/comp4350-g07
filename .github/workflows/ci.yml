# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Restro Sync CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: List frontend directory contents
        working-directory: frontend
        run: ls -la
      - name: Install dependencies (frontend)
        working-directory: frontend
        run: npm ci
      - name: Build (frontend)
        working-directory: frontend
        run: npm run build --if-present
      - name: Test (frontend)
        working-directory: frontend
        run: npm run test --if-present

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install dependencies (backend)
        working-directory: backend
        run: npm ci
      - name: Build (backend)
        working-directory: backend
        run: npm run build --if-present

      - name: Verify Docker Compose version
        run: docker-compose --version

      - name: Build and start test containers
        run: docker-compose up -d --build test test-db

      - name: Wait for services to be ready
        run: |
          # Optionally, wait for Postgres to be ready before running tests
          echo "Waiting for Postgres to be available..."
          until docker exec restro_sync_test_db pg_isready -U restro_usr; do
            sleep 2
          done

      - name: Run integration tests
        run: docker-compose run --rm test npm test -- --coverage --detectOpenHandles

      - name: Tear down containers
        run: docker-compose down
